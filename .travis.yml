#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2019, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Richard Berger
#    Christoph Junghans
#    Ryan S. Elliott
#    Alexander Stukowski
#

#
# Release: This file is part of the kim-api.git repository.
#

language: cpp

env:
  global:
    - secure: "knFkRceVfuvlc7j9u5OUDHCMlPu531f/HR6TV4zboPc8UtbJ/Hiz7ooRO2VZheoMhdWJjaWQLYEJ1CGLyszziCbETeBj6cbNmzXVcgE2p2JWI76L7RLIMZrAjDeg0X+p9l7HcFvEBMIz87jqirwuyZZVBdYPxOL8ECiPJIyS2Ec5cwTyj4TBYomNfrL8lksj10ui6HOPQ63jsF8B68ZzsmPf2CSZPZgLqDZAyBxc+jGdOB7TF6O5dJALWzMW0AdWdpsOxRkBCZHQdUEqeYMBF0Ypq1Xj/Tol5Qsh0UMYTHZ4E72XwSLL+wyUKpCR96iWqI8jYnYY+/h/eNcVKABPMX2nE0xaqhNPbdEVJPMaayVdxJMzDWxt2eIXTxLRPjcoqCiLGF9G860dxfvTwz7RSQZtnJmTClO/5jHdoDltof372E0MJOh7W2lR22jNDAHT6tmPevZGyTsMN+vKJ/u46P1v5DbdeRAgdjikVYCqqaqUvWzqj5Urs4gZI/dyPyEAZy0mwOgKdpEQhcNCDquq03jCU/V9SlqLgkyZPcTA9PVFtFTgZhEm6rA+hK/vtqo6BZxewyoFGDgVXOylA4f90kPZqOgO83ufeYi+s8RGLxAxLddcsxh4wtGhgnEwQJlznjxfWCKiirRZ4ZXSikoa28R/RbmK27syhYFbjs27D3g="

matrix:
  include:
    - name: "macOS Debug"
      if: branch != coverity_scan
      os: osx
      addons:
        homebrew:
          packages:
          - ccache
      env: CMAKE_BUILD_TYPE=Debug
      before_script:
        - export PATH="/usr/local/opt/ccache/libexec:$PATH" &&
          export CXX17=true &&
          export CXX=g++-9 &&
          export CC=gcc-9 &&
          export FC=gfortran-9
        - env
      script:
        - ./scripts/ci-build-and-test
    - name: "Fedora, Debug, Sanitize"
      if: branch != coverity_scan
      os: linux
      services: docker
      env: DISTRO=fedora
           CMAKE_BUILD_TYPE=Debug
           SANITIZE=true
           CXX17=true
      before_script:
        - mkdir "${HOME}/work" &&
          cd "${HOME}/work" &&
          cp -r "${HOME}/.ccache" ccache
        - env
      script:
        -  ${TRAVIS_BUILD_DIR}/scripts/ci-docker-build-and-run
             ${TRAVIS_BUILD_DIR}
             "${DISTRO}"
             "${TRAVIS_REPO_SLUG}:${DISTRO}"
             "${PWD}/ccache"
    - name: "openSUSE, Debug, IWYU, Sanitize, LTO"
      if: branch != coverity_scan
      os: linux
      services: docker
      env: DISTRO=openSUSE
           CMAKE_BUILD_TYPE=Debug
           IWYU=true
           SANITIZE=true
           CXX17=true
           CXXFLAGS="-flto=auto"
           CFLAGS="-flto=auto"
           FFLAGS="-flto=auto"
      before_script:
        - mkdir "${HOME}/work" &&
          cd "${HOME}/work" &&
          cp -r "${HOME}/.ccache" ccache
        - env
      script:
        -  ${TRAVIS_BUILD_DIR}/scripts/ci-docker-build-and-run
             "${TRAVIS_BUILD_DIR}"
             "${DISTRO}"
             "${TRAVIS_REPO_SLUG}:${DISTRO}"
             "${PWD}/ccache"
    - name: "ubuntu, Debug, Sanitize"
      if: branch != coverity_scan
      os: linux
      services: docker
      env: DISTRO=ubuntu
           CMAKE_BUILD_TYPE=Debug
           SANITIZE=true
           CXX17=true
      before_script:
        - mkdir "${HOME}/work" &&
          cd "${HOME}/work" &&
          cp -r "${HOME}/.ccache" ccache
        - env
      script:
        -  ${TRAVIS_BUILD_DIR}/scripts/ci-docker-build-and-run
             "${TRAVIS_BUILD_DIR}"
             "${DISTRO}"
             "${TRAVIS_REPO_SLUG}:${DISTRO}"
             "${PWD}/ccache"
    - name: "ubuntu cmake@3.10, Debug"
      if: branch != coverity_scan
      os: linux
      services: docker
      env: DISTRO=ubuntu_cmake310
           CMAKE_BUILD_TYPE=Debug
      before_script:
        - mkdir "${HOME}/work" &&
          cd "${HOME}/work" &&
          cp -r "${HOME}/.ccache" ccache
        - env
      script:
        -  ${TRAVIS_BUILD_DIR}/scripts/ci-docker-build-and-run
             "${TRAVIS_BUILD_DIR}"
             "${DISTRO}"
             "${TRAVIS_REPO_SLUG}:${DISTRO}"
             "${PWD}/ccache"
    - name: "centos (EPEL), Debug, Sanitize, Coverage"
      if: branch != coverity_scan
      os: linux
      services: docker
      env: DISTRO=centos
           CMAKE_BUILD_TYPE=Debug
           SANITIZE=true
           COVERAGE=true
      before_script:
        - mkdir "${HOME}/work" &&
          cd "${HOME}/work" &&
          cp -r "${HOME}/.ccache" ccache
        - env
      script:
        -  ${TRAVIS_BUILD_DIR}/scripts/ci-docker-build-and-run
             "${TRAVIS_BUILD_DIR}"
             "${DISTRO}"
             "${TRAVIS_REPO_SLUG}:${DISTRO}"
             "${PWD}/ccache"
    - name: "debian, Debug, Sanitize"
      if: branch != coverity_scan
      os: linux
      services: docker
      env: DISTRO=debian
           CMAKE_BUILD_TYPE=Debug
           SANITIZE=true
           CXX17=true
      before_script:
        - mkdir "${HOME}/work" &&
          cd "${HOME}/work" &&
          cp -r "${HOME}/.ccache" ccache
        - env
      script:
        -  ${TRAVIS_BUILD_DIR}/scripts/ci-docker-build-and-run
             "${TRAVIS_BUILD_DIR}"
             "${DISTRO}"
             "${TRAVIS_REPO_SLUG}:${DISTRO}"
             "${PWD}/ccache"
    - name: "Windows-MinGW, Debug"
      if: branch != coverity_scan
      os: windows
      env: CMAKE_BUILD_TYPE=Debug

      # Travis CI setup instructions for MSYS2/MINGW environment:
      # https://docs.travis-ci.com/user/reference/windows/#how-do-i-use-msys2
      # Additionaly installing 'mingw-w64-x86_64-doxygen' package.
      before_install:
        - |-
            case $TRAVIS_OS_NAME in
              windows)
                [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
                choco uninstall -y mingw
                choco upgrade --no-progress -y msys2
                export msys2='cmd //C RefreshEnv.cmd '
                export msys2+='& set MSYS=winsymlinks:nativestrict '
                export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
                export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
                export msys2+=" -msys2 -c "\"\$@"\" --"
                $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-doxygen
                ## Install more MSYS2 packages from https://packages.msys2.org/base here
                taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
                export PATH=/C/tools/msys64/mingw64/bin:$PATH
                export MAKE=mingw32-make  # so that Autotools can find it
                ;;
            esac

      before_cache:
      - |-
          case $TRAVIS_OS_NAME in
            windows)
              # https://unix.stackexchange.com/a/137322/107554
              $msys2 pacman --sync --clean --noconfirm
              ;;
          esac

      cache:
          directories:
          - $HOME/AppData/Local/Temp/chocolatey
          - /C/tools/msys64

      before_script:
        - export CMAKE_GENERATOR="MinGW Makefiles" &&
          export MAKE=mingw32-make
        - env
      script:
        - $mingw64 ./scripts/ci-build-and-test
    - name: "Coverity Scan"
      if: branch = coverity_scan
      os: linux
      env: COVERITY=true
      before_install:
        - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
        - env
      script:
        - true
      after_success:
        - cat /home/travis/build/openkim/kim-api/cov-int/scm_log.txt

cache:
  - ccache

addons:
  apt:
    packages:
      - make
      - cmake
      - git
      - g++
      - gfortran
      - ccache
      - wget
      - vim-common
  coverity_scan:
    project:
      name: "openkim/kim-api"
      description: "OpenKIM is an online framework for making molecular simulations reliable, reproducible, and portable. Computer implementations of interatomic models are archived in OpenKIM, verified for coding integrity, and tested by computing their predictions for a variety of material properties. Models conforming to the KIM application programming interface (API) work seamlessly with major simulation codes that have adopted the KIM API standard."
    notification_email: relliott@umn.edu
    build_command_prepend: "cmake ."
    build_command: "make"
    branch_pattern: coverity_scan
